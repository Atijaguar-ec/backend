name: Deploy Backend to Hetzner

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  test:
    permissions:
      contents: read
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.33
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: inatrace_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cp src/main/resources/application.properties.template src/main/resources/application-test.properties
          sed -i 's/localhost/127.0.0.1/g' src/main/resources/application-test.properties
          sed -i 's/INATrace.database.name =/INATrace.database.name = inatrace_test/g' src/main/resources/application-test.properties
          sed -i 's/spring.datasource.username =/spring.datasource.username = root/g' src/main/resources/application-test.properties
          sed -i 's/spring.datasource.password =/spring.datasource.password = root/g' src/main/resources/application-test.properties
          mvn clean test -Dspring.profiles.active=test

      - name: Run integration tests
        run: mvn verify -Dspring.profiles.active=test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: target/dependency-check-report.html

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/inatrace/backend
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Run database migrations
            docker-compose run --rm backend-migration
            
            # Blue-Green deployment
            export IMAGE_TAG=latest
            docker-compose up -d backend-blue
            
            # Health check on blue
            sleep 30
            if curl -f http://localhost:8081/actuator/health; then
              # Switch traffic to blue
              docker-compose up -d traefik
              # Stop green
              docker-compose stop backend-green
              # Rename blue to green for next deployment
              docker-compose stop backend-blue
              docker-compose up -d backend-green
            else
              echo "Health check failed on blue deployment"
              docker-compose stop backend-blue
              exit 1
            fi
            
            # Cleanup old images
            docker image prune -f

      - name: Run database backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/inatrace/backend
            docker-compose exec -T mysql mysqldump -u root -p$MYSQL_ROOT_PASSWORD inatrace > backup-$(date +%Y%m%d-%H%M%S).sql
            # Keep only last 7 days of backups
            find . -name "backup-*.sql" -mtime +7 -delete

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
