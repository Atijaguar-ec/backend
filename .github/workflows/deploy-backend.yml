name: Deploy Backend to Hetzner

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

  workflow_dispatch:
    inputs:
      run_security_scan:
        description: 'Run security scan'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  test:
    permissions:
      contents: read
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.33
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: inatrace_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cp src/main/resources/application.properties.template src/main/resources/application-test.properties
          sed -i 's/localhost/127.0.0.1/g' src/main/resources/application-test.properties
          sed -i 's/INATrace.database.name =/INATrace.database.name = inatrace_test/g' src/main/resources/application-test.properties
          sed -i 's/spring.datasource.username =/spring.datasource.username = root/g' src/main/resources/application-test.properties
          sed -i 's/spring.datasource.password =/spring.datasource.password = root/g' src/main/resources/application-test.properties
          mvn clean test -Dspring.profiles.active=test

      - name: Run integration tests
        run: mvn verify -Dspring.profiles.active=test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

  security-scan:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_security_scan }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: target/dependency-check-report.html

  build:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/inatrace/backend
            
            # Compute lowercase image path for GHCR (requires lowercase)
            IMAGE=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
            
            # Pull latest image
            docker pull "$IMAGE:latest"
            
            # Export variables used by compose file
            export IMAGE_NAME="$IMAGE"
            export TAG=latest
            # Create override to inject DDL auto env for this deploy (idempotent)
            mkdir -p ci
            printf "%s\n" \
              "SPRING_JPA_HIBERNATE_DDL_AUTO=update" \
              "SPRING_JPA_PROPERTIES_HIBERNATE_HBM2DDL_AUTO=update" \
              > ci/extra.env

            printf "%s\n" \
              "services:" \
              "  inatrace-backend:" \
              "    env_file:" \
              "      - ci/extra.env" \
              > ci/docker-compose.override.yml

            COMPOSE="docker-compose -f ci/docker-compose.yml -f ci/docker-compose.override.yml --env-file ci/.env"
            
            # Deploy/update backend service
            $COMPOSE up -d inatrace-backend || $COMPOSE up -d backend || true
            
            # Cleanup old images
            docker image prune -f

      - name: Run database backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/inatrace/backend
            COMPOSE="docker-compose -f ci/docker-compose.yml --env-file ci/.env"
            # Dump DB using container env vars; write dump file on host
            $COMPOSE exec -T inatrace-mysql sh -lc 'mysqldump -u root -p"$MYSQL_ROOT_PASSWORD" "$MYSQL_DATABASE"' > backup-$(date +%Y%m%d-%H%M%S).sql
            # Keep only last 7 days of backups
            find . -name "backup-*.sql" -mtime +7 -delete

      - name: Skip Slack notification
        if: always()
        run: echo "Slack notification disabled"
